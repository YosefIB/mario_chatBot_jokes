'use strict';

var assert = require('assert');

var _require = require('crypto'),
    randomFillSync = _require.randomFillSync;

var _require2 = require('util'),
    inspect = _require2.inspect;

var busboy = require('..');

var _require3 = require('./common.js'),
    mustCall = _require3.mustCall;

var BOUNDARY = 'u2KxIV5yF1y+xUspOQCCZopaVgeV6Jxihv35XQJmuTx8X3sh';

function formDataSection(key, value) {
  return Buffer.from("\r\n--".concat(BOUNDARY) + "\r\nContent-Disposition: form-data; name=\"".concat(key, "\"") + "\r\n\r\n".concat(value));
}

function formDataFile(key, filename, contentType) {
  var buf = Buffer.allocUnsafe(100000);
  return Buffer.concat([Buffer.from("\r\n--".concat(BOUNDARY, "\r\n")), Buffer.from("Content-Disposition: form-data; name=\"".concat(key, "\"") + "; filename=\"".concat(filename, "\"\r\n")), Buffer.from("Content-Type: ".concat(contentType, "\r\n\r\n")), randomFillSync(buf)]);
}

var reqChunks = [Buffer.concat([formDataFile('file', 'file.bin', 'application/octet-stream'), formDataSection('foo', 'foo value')]), formDataSection('bar', 'bar value'), Buffer.from("\r\n--".concat(BOUNDARY, "--\r\n"))];
var bb = busboy({
  headers: {
    'content-type': "multipart/form-data; boundary=".concat(BOUNDARY)
  }
});
var expected = [{
  type: 'file',
  name: 'file',
  info: {
    filename: 'file.bin',
    encoding: '7bit',
    mimeType: 'application/octet-stream'
  }
}, {
  type: 'field',
  name: 'foo',
  val: 'foo value',
  info: {
    nameTruncated: false,
    valueTruncated: false,
    encoding: '7bit',
    mimeType: 'text/plain'
  }
}, {
  type: 'field',
  name: 'bar',
  val: 'bar value',
  info: {
    nameTruncated: false,
    valueTruncated: false,
    encoding: '7bit',
    mimeType: 'text/plain'
  }
}];
var results = [];
bb.on('field', function (name, val, info) {
  results.push({
    type: 'field',
    name: name,
    val: val,
    info: info
  });
});
bb.on('file', function (name, stream, info) {
  results.push({
    type: 'file',
    name: name,
    info: info
  }); // Simulate a pipe where the destination is pausing (perhaps due to waiting
  // for file system write to finish)

  setTimeout(function () {
    stream.resume();
  }, 10);
});
bb.on('close', mustCall(function () {
  assert.deepStrictEqual(results, expected, 'Results mismatch.\n' + "Parsed: ".concat(inspect(results), "\n") + "Expected: ".concat(inspect(expected)));
}));

for (var _i = 0, _reqChunks = reqChunks; _i < _reqChunks.length; _i++) {
  var chunk = _reqChunks[_i];
  bb.write(chunk);
}

bb.end();