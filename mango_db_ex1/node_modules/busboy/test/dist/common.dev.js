'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var assert = require('assert');

var _require = require('util'),
    inspect = _require.inspect;

var mustCallChecks = [];

function noop() {}

function runCallChecks(exitCode) {
  if (exitCode !== 0) return;
  var failed = mustCallChecks.filter(function (context) {
    if ('minimum' in context) {
      context.messageSegment = "at least ".concat(context.minimum);
      return context.actual < context.minimum;
    }

    context.messageSegment = "exactly ".concat(context.exact);
    return context.actual !== context.exact;
  });
  failed.forEach(function (context) {
    console.error('Mismatched %s function calls. Expected %s, actual %d.', context.name, context.messageSegment, context.actual);
    console.error(context.stack.split('\n').slice(2).join('\n'));
  });
  if (failed.length) process.exit(1);
}

function mustCall(fn, exact) {
  return _mustCallInner(fn, exact, 'exact');
}

function mustCallAtLeast(fn, minimum) {
  return _mustCallInner(fn, minimum, 'minimum');
}

function _mustCallInner(fn) {
  var _context;

  var criteria = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var field = arguments.length > 2 ? arguments[2] : undefined;
  if (process._exiting) throw new Error('Cannot use common.mustCall*() in process exit handler');

  if (typeof fn === 'number') {
    criteria = fn;
    fn = noop;
  } else if (fn === undefined) {
    fn = noop;
  }

  if (typeof criteria !== 'number') throw new TypeError("Invalid ".concat(field, " value: ").concat(criteria));
  var context = (_context = {}, _defineProperty(_context, field, criteria), _defineProperty(_context, "actual", 0), _defineProperty(_context, "stack", inspect(new Error())), _defineProperty(_context, "name", fn.name || '<anonymous>'), _context); // Add the exit listener only once to avoid listener leak warnings

  if (mustCallChecks.length === 0) process.on('exit', runCallChecks);
  mustCallChecks.push(context);

  function wrapped() {
    var _fn;

    ++context.actual;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (_fn = fn).call.apply(_fn, [this].concat(args));
  } // TODO: remove origFn?


  wrapped.origFn = fn;
  return wrapped;
}

function getCallSite(top) {
  var originalStackFormatter = Error.prepareStackTrace;

  Error.prepareStackTrace = function (err, stack) {
    return "".concat(stack[0].getFileName(), ":").concat(stack[0].getLineNumber());
  };

  var err = new Error();
  Error.captureStackTrace(err, top); // With the V8 Error API, the stack is not formatted until it is accessed
  // eslint-disable-next-line no-unused-expressions

  err.stack;
  Error.prepareStackTrace = originalStackFormatter;
  return err.stack;
}

function mustNotCall(msg) {
  var callSite = getCallSite(mustNotCall);
  return function mustNotCall() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    args = args.map(inspect).join(', ');
    var argsInfo = args.length > 0 ? "\ncalled with arguments: ".concat(args) : '';
    assert.fail("".concat(msg || 'function should not have been called', " at ").concat(callSite) + argsInfo);
  };
}

module.exports = {
  mustCall: mustCall,
  mustCallAtLeast: mustCallAtLeast,
  mustNotCall: mustNotCall
};