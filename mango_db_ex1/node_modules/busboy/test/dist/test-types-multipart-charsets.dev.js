'use strict';

var assert = require('assert');

var _require = require('util'),
    inspect = _require.inspect;

var _require2 = require("".concat(__dirname, "/common.js")),
    mustCall = _require2.mustCall;

var busboy = require('..');

var input = Buffer.from(['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k', 'Content-Disposition: form-data; ' + 'name="upload_file_0"; filename="テスト.dat"', 'Content-Type: application/octet-stream', '', 'A'.repeat(1023), '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'].join('\r\n'));
var boundary = '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k';
var expected = [{
  type: 'file',
  name: 'upload_file_0',
  data: Buffer.from('A'.repeat(1023)),
  info: {
    filename: 'テスト.dat',
    encoding: '7bit',
    mimeType: 'application/octet-stream'
  },
  limited: false
}];
var bb = busboy({
  defParamCharset: 'utf8',
  headers: {
    'content-type': "multipart/form-data; boundary=".concat(boundary)
  }
});
var results = [];
bb.on('field', function (name, val, info) {
  results.push({
    type: 'field',
    name: name,
    val: val,
    info: info
  });
});
bb.on('file', function (name, stream, info) {
  var data = [];
  var nb = 0;
  var file = {
    type: 'file',
    name: name,
    data: null,
    info: info,
    limited: false
  };
  results.push(file);
  stream.on('data', function (d) {
    data.push(d);
    nb += d.length;
  }).on('limit', function () {
    file.limited = true;
  }).on('close', function () {
    file.data = Buffer.concat(data, nb);
    assert.strictEqual(stream.truncated, file.limited);
  }).once('error', function (err) {
    file.err = err.message;
  });
});
bb.on('error', function (err) {
  results.push({
    error: err.message
  });
});
bb.on('partsLimit', function () {
  results.push('partsLimit');
});
bb.on('filesLimit', function () {
  results.push('filesLimit');
});
bb.on('fieldsLimit', function () {
  results.push('fieldsLimit');
});
bb.on('close', mustCall(function () {
  assert.deepStrictEqual(results, expected, 'Results mismatch.\n' + "Parsed: ".concat(inspect(results), "\n") + "Expected: ".concat(inspect(expected)));
}));
bb.end(input);