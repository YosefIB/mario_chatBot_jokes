'use strict';

var buffers = [Buffer.from(new Array(900).fill('').map(function (_, i) {
  return "key".concat(i, "=value").concat(i);
}).join('&'))];
var calls = {
  field: 0,
  end: 0
};
var moduleName = process.argv[2];

switch (moduleName) {
  case 'busboy':
    {
      var busboy = require('busboy');

      console.time(moduleName);
      var parser = busboy({
        limits: {
          fieldSizeLimit: Infinity
        },
        headers: {
          'content-type': 'application/x-www-form-urlencoded; charset=utf-8'
        }
      });
      parser.on('field', function (name, val, info) {
        ++calls.field;
      }).on('close', function () {
        ++calls.end;
        console.timeEnd(moduleName);
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = buffers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var buf = _step.value;
          parser.write(buf);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      parser.end();
      break;
    }

  case 'formidable':
    {
      var QuerystringParser = require('formidable/src/parsers/Querystring.js');

      console.time(moduleName);

      var _parser = new QuerystringParser();

      _parser.on('data', function (obj) {
        ++calls.field;
      }).on('end', function () {
        ++calls.end;
        console.timeEnd(moduleName);
      });

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = buffers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _buf = _step2.value;

          _parser.write(_buf);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      _parser.end();

      break;
    }

  case 'formidable-streaming':
    {
      var _QuerystringParser = require('formidable/src/parsers/StreamingQuerystring.js');

      console.time(moduleName);

      var _parser2 = new _QuerystringParser();

      _parser2.on('data', function (obj) {
        ++calls.field;
      }).on('end', function () {
        ++calls.end;
        console.timeEnd(moduleName);
      });

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = buffers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _buf2 = _step3.value;

          _parser2.write(_buf2);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      _parser2.end();

      break;
    }

  default:
    if (moduleName === undefined) console.error('Missing parser module name');else console.error("Invalid parser module name: ".concat(moduleName));
    process.exit(1);
}