'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require('./utils.js'),
    parseContentType = _require.parseContentType;

function getInstance(cfg) {
  var headers = cfg.headers;
  var conType = parseContentType(headers['content-type']);
  if (!conType) throw new Error('Malformed content type');
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var type = _step.value;
      var matched = type.detect(conType);
      if (!matched) continue;
      var instanceCfg = {
        limits: cfg.limits,
        headers: headers,
        conType: conType,
        highWaterMark: undefined,
        fileHwm: undefined,
        defCharset: undefined,
        defParamCharset: undefined,
        preservePath: false
      };
      if (cfg.highWaterMark) instanceCfg.highWaterMark = cfg.highWaterMark;
      if (cfg.fileHwm) instanceCfg.fileHwm = cfg.fileHwm;
      instanceCfg.defCharset = cfg.defCharset;
      instanceCfg.defParamCharset = cfg.defParamCharset;
      instanceCfg.preservePath = cfg.preservePath;
      return new type(instanceCfg);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  throw new Error("Unsupported content type: ".concat(headers['content-type']));
} // Note: types are explicitly listed here for easier bundling
// See: https://github.com/mscdex/busboy/issues/121


var TYPES = [require('./types/multipart'), require('./types/urlencoded')].filter(function (typemod) {
  return typeof typemod.detect === 'function';
});

module.exports = function (cfg) {
  if (_typeof(cfg) !== 'object' || cfg === null) cfg = {};

  if (_typeof(cfg.headers) !== 'object' || cfg.headers === null || typeof cfg.headers['content-type'] !== 'string') {
    throw new Error('Missing Content-Type');
  }

  return getInstance(cfg);
};