'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var YES_MATCH_SCORE_THRESHOLD = 2;
var NO_MATCH_SCORE_THRESHOLD = 1.25;
var yMatch = new Map([[5, 0.25], [6, 0.25], [7, 0.25], ['t', 0.75], ['y', 1], ['u', 0.75], ['g', 0.25], ['h', 0.25], ['j', 0.25]]);
var eMatch = new Map([[2, 0.25], [3, 0.25], [4, 0.25], ['w', 0.75], ['e', 1], ['r', 0.75], ['s', 0.25], ['d', 0.25], ['f', 0.25]]);
var sMatch = new Map([['q', 0.25], ['w', 0.25], ['e', 0.25], ['a', 0.75], ['s', 1], ['d', 0.75], ['z', 0.25], ['x', 0.25], ['c', 0.25]]);
var nMatch = new Map([['h', 0.25], ['j', 0.25], ['k', 0.25], ['b', 0.75], ['n', 1], ['m', 0.75]]);
var oMatch = new Map([[9, 0.25], [0, 0.25], ['i', 0.75], ['o', 1], ['p', 0.75], ['k', 0.25], ['l', 0.25]]);

function getYesMatchScore(value) {
  var _value = _slicedToArray(value, 3),
      y = _value[0],
      e = _value[1],
      s = _value[2];

  var score = 0;

  if (yMatch.has(y)) {
    score += yMatch.get(y);
  }

  if (eMatch.has(e)) {
    score += eMatch.get(e);
  }

  if (sMatch.has(s)) {
    score += sMatch.get(s);
  }

  return score;
}

function getNoMatchScore(value) {
  var _value2 = _slicedToArray(value, 2),
      n = _value2[0],
      o = _value2[1];

  var score = 0;

  if (nMatch.has(n)) {
    score += nMatch.get(n);
  }

  if (oMatch.has(o)) {
    score += oMatch.get(o);
  }

  return score;
}

module.exports = function (input, options) {
  if (getYesMatchScore(input) >= YES_MATCH_SCORE_THRESHOLD) {
    return true;
  }

  if (getNoMatchScore(input) >= NO_MATCH_SCORE_THRESHOLD) {
    return false;
  }

  return options["default"];
};