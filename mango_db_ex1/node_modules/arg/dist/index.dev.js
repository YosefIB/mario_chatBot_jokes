"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var flagSymbol = Symbol('arg flag');

function arg(opts) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$argv = _ref.argv,
      argv = _ref$argv === void 0 ? process.argv.slice(2) : _ref$argv,
      _ref$permissive = _ref.permissive,
      permissive = _ref$permissive === void 0 ? false : _ref$permissive,
      _ref$stopAtPositional = _ref.stopAtPositional,
      stopAtPositional = _ref$stopAtPositional === void 0 ? false : _ref$stopAtPositional;

  if (!opts) {
    throw new Error('Argument specification object is required');
  }

  var result = {
    _: []
  };
  var aliases = {};
  var handlers = {};

  for (var _i = 0, _Object$keys = Object.keys(opts); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];

    if (!key) {
      throw new TypeError('Argument key cannot be an empty string');
    }

    if (key[0] !== '-') {
      throw new TypeError("Argument key must start with '-' but found: '".concat(key, "'"));
    }

    if (key.length === 1) {
      throw new TypeError("Argument key must have a name; singular '-' keys are not allowed: ".concat(key));
    }

    if (typeof opts[key] === 'string') {
      aliases[key] = opts[key];
      continue;
    }

    var _type = opts[key];
    var _isFlag = false;

    if (Array.isArray(_type) && _type.length === 1 && typeof _type[0] === 'function') {
      (function () {
        var _type2 = _type,
            _type3 = _slicedToArray(_type2, 1),
            fn = _type3[0];

        _type = function _type(value, name) {
          var prev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          prev.push(fn(value, name, prev[prev.length - 1]));
          return prev;
        };

        _isFlag = fn === Boolean || fn[flagSymbol] === true;
      })();
    } else if (typeof _type === 'function') {
      _isFlag = _type === Boolean || _type[flagSymbol] === true;
    } else {
      throw new TypeError("Type missing or not a function or valid array type: ".concat(key));
    }

    if (key[1] !== '-' && key.length > 2) {
      throw new TypeError("Short argument keys (with a single hyphen) must have only one character: ".concat(key));
    }

    handlers[key] = [_type, _isFlag];
  }

  for (var i = 0, len = argv.length; i < len; i++) {
    var wholeArg = argv[i];

    if (stopAtPositional && result._.length > 0) {
      result._ = result._.concat(argv.slice(i));
      break;
    }

    if (wholeArg === '--') {
      result._ = result._.concat(argv.slice(i + 1));
      break;
    }

    if (wholeArg.length > 1 && wholeArg[0] === '-') {
      /* eslint-disable operator-linebreak */
      var separatedArguments = wholeArg[1] === '-' || wholeArg.length === 2 ? [wholeArg] : wholeArg.slice(1).split('').map(function (a) {
        return "-".concat(a);
      });
      /* eslint-enable operator-linebreak */

      for (var j = 0; j < separatedArguments.length; j++) {
        var _arg = separatedArguments[j];

        var _ref2 = _arg[1] === '-' ? _arg.split(/=(.*)/, 2) : [_arg, undefined],
            _ref3 = _slicedToArray(_ref2, 2),
            originalArgName = _ref3[0],
            argStr = _ref3[1];

        var argName = originalArgName;

        while (argName in aliases) {
          argName = aliases[argName];
        }

        if (!(argName in handlers)) {
          if (permissive) {
            result._.push(_arg);

            continue;
          } else {
            var err = new Error("Unknown or unexpected option: ".concat(originalArgName));
            err.code = 'ARG_UNKNOWN_OPTION';
            throw err;
          }
        }

        var _handlers$argName = _slicedToArray(handlers[argName], 2),
            type = _handlers$argName[0],
            isFlag = _handlers$argName[1];

        if (!isFlag && j + 1 < separatedArguments.length) {
          throw new TypeError("Option requires argument (but was followed by another short argument): ".concat(originalArgName));
        }

        if (isFlag) {
          result[argName] = type(true, argName, result[argName]);
        } else if (argStr === undefined) {
          if (argv.length < i + 2 || argv[i + 1].length > 1 && argv[i + 1][0] === '-' && !(argv[i + 1].match(/^-?\d*(\.(?=\d))?\d*$/) && (type === Number || // eslint-disable-next-line no-undef
          typeof BigInt !== 'undefined' && type === BigInt))) {
            var extended = originalArgName === argName ? '' : " (alias for ".concat(argName, ")");
            throw new Error("Option requires argument: ".concat(originalArgName).concat(extended));
          }

          result[argName] = type(argv[i + 1], argName, result[argName]);
          ++i;
        } else {
          result[argName] = type(argStr, argName, result[argName]);
        }
      }
    } else {
      result._.push(wholeArg);
    }
  }

  return result;
}

arg.flag = function (fn) {
  fn[flagSymbol] = true;
  return fn;
}; // Utility types


arg.COUNT = arg.flag(function (v, name, existingCount) {
  return (existingCount || 0) + 1;
});
module.exports = arg;