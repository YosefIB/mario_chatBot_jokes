"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installCommonjsResolveHooksIfNecessary = void 0;
/**
 * @internal
 */

function installCommonjsResolveHooksIfNecessary(tsNodeService) {
  var Module = require('module');

  var originalResolveFilename = Module._resolveFilename;
  var originalFindPath = Module._findPath;
  var shouldInstallHook = tsNodeService.options.experimentalResolver;

  if (shouldInstallHook) {
    var _resolveFilename = function _resolveFilename(request, parent, isMain, options) {
      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      if (!tsNodeService.enabled()) return originalResolveFilename.call.apply(originalResolveFilename, [this, request, parent, isMain, options].concat(rest));
      return Module_resolveFilename.call.apply(Module_resolveFilename, [this, request, parent, isMain, options].concat(rest));
    };

    var _findPath = function _findPath() {
      if (!tsNodeService.enabled()) return originalFindPath.apply(this, arguments);
      return Module_findPath.apply(this, arguments);
    };

    var _tsNodeService$getNod = tsNodeService.getNodeCjsLoader(),
        Module_findPath = _tsNodeService$getNod.Module_findPath,
        Module_resolveFilename = _tsNodeService$getNod.Module_resolveFilename;

    Module._resolveFilename = _resolveFilename;
    Module._findPath = _findPath;
  }
}

exports.installCommonjsResolveHooksIfNecessary = installCommonjsResolveHooksIfNecessary;