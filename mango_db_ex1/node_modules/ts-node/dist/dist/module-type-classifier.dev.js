"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createModuleTypeClassifier = void 0;

var ts_internals_1 = require("./ts-internals");

var util_1 = require("./util");
/**
 * @internal
 * May receive non-normalized options -- basePath and patterns -- and will normalize them
 * internally.
 * However, calls to `classifyModule` must pass pre-normalized paths!
 */


function createModuleTypeClassifier(options) {
  var patterns = options.patterns,
      _basePath = options.basePath;
  var basePath = _basePath !== undefined ? (0, util_1.normalizeSlashes)(_basePath).replace(/\/$/, '') : undefined;
  var patternTypePairs = Object.entries(patterns !== null && patterns !== void 0 ? patterns : []).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        _pattern = _ref2[0],
        type = _ref2[1];

    var pattern = (0, util_1.normalizeSlashes)(_pattern);
    return {
      pattern: parsePattern(basePath, pattern),
      type: type
    };
  });
  var classifications = {
    "package": {
      moduleType: 'auto'
    },
    cjs: {
      moduleType: 'cjs'
    },
    esm: {
      moduleType: 'esm'
    }
  };
  var auto = classifications["package"]; // Passed path must be normalized!

  function classifyModuleNonCached(path) {
    var matched = matchPatterns(patternTypePairs, function (_) {
      return _.pattern;
    }, path);
    if (matched) return classifications[matched.type];
    return auto;
  }

  var classifyModule = (0, util_1.cachedLookup)(classifyModuleNonCached);

  function classifyModuleAuto(path) {
    return auto;
  }

  return {
    classifyModuleByModuleTypeOverrides: patternTypePairs.length ? classifyModule : classifyModuleAuto
  };
}

exports.createModuleTypeClassifier = createModuleTypeClassifier;

function parsePattern(basePath, patternString) {
  var pattern = (0, ts_internals_1.getPatternFromSpec)(patternString, basePath);
  return pattern !== undefined ? new RegExp(pattern) : /(?:)/;
}

function matchPatterns(objects, getPattern, candidate) {
  for (var i = objects.length - 1; i >= 0; i--) {
    var object = objects[i];
    var pattern = getPattern(object);

    if (pattern === null || pattern === void 0 ? void 0 : pattern.test(candidate)) {
      return object;
    }
  }
}