"use strict";

module.exports = {
  ArrayFrom: Array.from,
  ArrayIsArray: Array.isArray,
  ArrayPrototypeShift: function ArrayPrototypeShift(obj) {
    return Array.prototype.shift.call(obj);
  },
  ArrayPrototypeForEach: function ArrayPrototypeForEach(arr) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    return Array.prototype.forEach.apply(arr, rest);
  },
  ArrayPrototypeIncludes: function ArrayPrototypeIncludes(arr) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      rest[_key2 - 1] = arguments[_key2];
    }

    return Array.prototype.includes.apply(arr, rest);
  },
  ArrayPrototypeJoin: function ArrayPrototypeJoin(arr) {
    for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      rest[_key3 - 1] = arguments[_key3];
    }

    return Array.prototype.join.apply(arr, rest);
  },
  ArrayPrototypePop: function ArrayPrototypePop(arr) {
    for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      rest[_key4 - 1] = arguments[_key4];
    }

    return Array.prototype.pop.apply(arr, rest);
  },
  ArrayPrototypePush: function ArrayPrototypePush(arr) {
    for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      rest[_key5 - 1] = arguments[_key5];
    }

    return Array.prototype.push.apply(arr, rest);
  },
  FunctionPrototype: Function.prototype,
  JSONParse: JSON.parse,
  JSONStringify: JSON.stringify,
  ObjectFreeze: Object.freeze,
  ObjectKeys: Object.keys,
  ObjectGetOwnPropertyNames: Object.getOwnPropertyNames,
  ObjectDefineProperty: Object.defineProperty,
  ObjectPrototypeHasOwnProperty: function ObjectPrototypeHasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  },
  RegExpPrototypeExec: function RegExpPrototypeExec(obj, string) {
    return RegExp.prototype.exec.call(obj, string);
  },
  RegExpPrototypeTest: function RegExpPrototypeTest(obj, string) {
    return RegExp.prototype.test.call(obj, string);
  },
  RegExpPrototypeSymbolReplace: function RegExpPrototypeSymbolReplace(obj) {
    for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      rest[_key6 - 1] = arguments[_key6];
    }

    return RegExp.prototype[Symbol.replace].apply(obj, rest);
  },
  SafeMap: Map,
  SafeSet: Set,
  SafeWeakMap: WeakMap,
  StringPrototypeEndsWith: function StringPrototypeEndsWith(str) {
    for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      rest[_key7 - 1] = arguments[_key7];
    }

    return String.prototype.endsWith.apply(str, rest);
  },
  StringPrototypeIncludes: function StringPrototypeIncludes(str) {
    for (var _len8 = arguments.length, rest = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
      rest[_key8 - 1] = arguments[_key8];
    }

    return String.prototype.includes.apply(str, rest);
  },
  StringPrototypeLastIndexOf: function StringPrototypeLastIndexOf(str) {
    for (var _len9 = arguments.length, rest = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
      rest[_key9 - 1] = arguments[_key9];
    }

    return String.prototype.lastIndexOf.apply(str, rest);
  },
  StringPrototypeIndexOf: function StringPrototypeIndexOf(str) {
    for (var _len10 = arguments.length, rest = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
      rest[_key10 - 1] = arguments[_key10];
    }

    return String.prototype.indexOf.apply(str, rest);
  },
  StringPrototypeRepeat: function StringPrototypeRepeat(str) {
    for (var _len11 = arguments.length, rest = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
      rest[_key11 - 1] = arguments[_key11];
    }

    return String.prototype.repeat.apply(str, rest);
  },
  StringPrototypeReplace: function StringPrototypeReplace(str) {
    for (var _len12 = arguments.length, rest = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {
      rest[_key12 - 1] = arguments[_key12];
    }

    return String.prototype.replace.apply(str, rest);
  },
  StringPrototypeSlice: function StringPrototypeSlice(str) {
    for (var _len13 = arguments.length, rest = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {
      rest[_key13 - 1] = arguments[_key13];
    }

    return String.prototype.slice.apply(str, rest);
  },
  StringPrototypeSplit: function StringPrototypeSplit(str) {
    for (var _len14 = arguments.length, rest = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {
      rest[_key14 - 1] = arguments[_key14];
    }

    return String.prototype.split.apply(str, rest);
  },
  StringPrototypeStartsWith: function StringPrototypeStartsWith(str) {
    for (var _len15 = arguments.length, rest = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
      rest[_key15 - 1] = arguments[_key15];
    }

    return String.prototype.startsWith.apply(str, rest);
  },
  StringPrototypeSubstr: function StringPrototypeSubstr(str) {
    for (var _len16 = arguments.length, rest = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {
      rest[_key16 - 1] = arguments[_key16];
    }

    return String.prototype.substr.apply(str, rest);
  },
  StringPrototypeCharCodeAt: function StringPrototypeCharCodeAt(str) {
    for (var _len17 = arguments.length, rest = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {
      rest[_key17 - 1] = arguments[_key17];
    }

    return String.prototype.charCodeAt.apply(str, rest);
  },
  StringPrototypeMatch: function StringPrototypeMatch(str) {
    for (var _len18 = arguments.length, rest = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {
      rest[_key18 - 1] = arguments[_key18];
    }

    return String.prototype.match.apply(str, rest);
  },
  SyntaxError: SyntaxError
};