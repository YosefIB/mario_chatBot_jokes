// Copied from https://github.com/nodejs/node/blob/v17.0.1/lib/internal/modules/cjs/helpers.js
'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _require = require('./node-primordials'),
    ArrayPrototypeForEach = _require.ArrayPrototypeForEach,
    ObjectDefineProperty = _require.ObjectDefineProperty,
    ObjectPrototypeHasOwnProperty = _require.ObjectPrototypeHasOwnProperty,
    SafeSet = _require.SafeSet,
    StringPrototypeIncludes = _require.StringPrototypeIncludes,
    StringPrototypeStartsWith = _require.StringPrototypeStartsWith;

var _require2 = require('./node-options'),
    getOptionValue = _require2.getOptionValue;

var userConditions = getOptionValue('--conditions');
var noAddons = getOptionValue('--no-addons');
var addonConditions = noAddons ? [] : ['node-addons']; // TODO: Use this set when resolving pkg#exports conditions in loader.js.

var cjsConditions = new SafeSet(['require', 'node'].concat(addonConditions, _toConsumableArray(userConditions)));
/**
 * @param {any} object
 * @param {string} [dummyModuleName]
 * @return {void}
 */

function addBuiltinLibsToObject(object, dummyModuleName) {
  // Make built-in modules available directly (loaded lazily).
  var Module = require('module').Module;

  var builtinModules = Module.builtinModules; // To require built-in modules in user-land and ignore modules whose
  // `canBeRequiredByUsers` is false. So we create a dummy module object and not
  // use `require()` directly.

  var dummyModule = new Module(dummyModuleName);
  ArrayPrototypeForEach(builtinModules, function (name) {
    // Neither add underscored modules, nor ones that contain slashes (e.g.,
    // 'fs/promises') or ones that are already defined.
    if (StringPrototypeStartsWith(name, '_') || StringPrototypeIncludes(name, '/') || ObjectPrototypeHasOwnProperty(object, name)) {
      return;
    } // Goals of this mechanism are:
    // - Lazy loading of built-in modules
    // - Having all built-in modules available as non-enumerable properties
    // - Allowing the user to re-assign these variables as if there were no
    //   pre-existing globals with the same name.


    var setReal = function setReal(val) {
      // Deleting the property before re-assigning it disables the
      // getter/setter mechanism.
      delete object[name];
      object[name] = val;
    };

    ObjectDefineProperty(object, name, {
      get: function get() {
        // Node 12 hack; remove when we drop node12 support
        var lib = (dummyModule.require || require)(name); // Disable the current getter/setter and set up a new
        // non-enumerable property.


        delete object[name];
        ObjectDefineProperty(object, name, {
          get: function get() {
            return lib;
          },
          set: setReal,
          configurable: true,
          enumerable: false
        });
        return lib;
      },
      set: setReal,
      configurable: true,
      enumerable: false
    });
  });
}

exports.addBuiltinLibsToObject = addBuiltinLibsToObject;
exports.cjsConditions = cjsConditions;