'use strict';

var assert = require('assert');

var StreamSearch = require('../lib/sbmh.js');

[{
  needle: '\r\n',
  chunks: ['foo', ' bar', '\r', '\n', 'baz, hello\r', '\n world.', '\r\n Node.JS rules!!\r\n\r\n'],
  expect: [[false, 'foo'], [false, ' bar'], [true, null], [false, 'baz, hello'], [true, null], [false, ' world.'], [true, null], [true, ' Node.JS rules!!'], [true, '']]
}, {
  needle: '---foobarbaz',
  chunks: ['---foobarbaz', 'asdf', '\r\n', '---foobarba', '---foobar', 'ba', '\r\n---foobarbaz--\r\n'],
  expect: [[true, null], [false, 'asdf'], [false, '\r\n'], [false, '---foobarba'], [false, '---foobarba'], [true, '\r\n'], [false, '--\r\n']]
}].forEach(function (test, i) {
  console.log("Running test #".concat(i + 1));
  var needle = test.needle,
      chunks = test.chunks,
      expect = test.expect;
  var results = [];
  var ss = new StreamSearch(Buffer.from(needle), function (isMatch, data, start, end) {
    if (data) data = data.toString('latin1', start, end);else data = null;
    results.push([isMatch, data]);
  });
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var chunk = _step.value;
      ss.push(Buffer.from(chunk));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  assert.deepStrictEqual(results, expect);
});