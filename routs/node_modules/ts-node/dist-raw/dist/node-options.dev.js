"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Replacement for node's internal 'internal/options' module
exports.getOptionValue = getOptionValue;

function getOptionValue(opt) {
  parseOptions();
  return options[opt];
}

var options;

function parseOptions() {
  if (!options) {
    options = _objectSpread({
      '--preserve-symlinks': false,
      '--preserve-symlinks-main': false,
      '--input-type': undefined,
      '--experimental-specifier-resolution': 'explicit',
      '--experimental-policy': undefined,
      '--conditions': [],
      '--pending-deprecation': false
    }, parseArgv(getNodeOptionsEnvArgv()), {}, parseArgv(process.execArgv), {}, getOptionValuesFromOtherEnvVars());
  }
}

function parseArgv(argv) {
  return require('arg')({
    '--preserve-symlinks': Boolean,
    '--preserve-symlinks-main': Boolean,
    '--input-type': String,
    '--experimental-specifier-resolution': String,
    // Legacy alias for node versions prior to 12.16
    '--es-module-specifier-resolution': '--experimental-specifier-resolution',
    '--experimental-policy': String,
    '--conditions': [String],
    '--pending-deprecation': Boolean,
    '--experimental-json-modules': Boolean,
    '--experimental-wasm-modules': Boolean
  }, {
    argv: argv,
    permissive: true
  });
}

function getNodeOptionsEnvArgv() {
  var errors = [];
  var envArgv = ParseNodeOptionsEnvVar(process.env.NODE_OPTIONS || '', errors);

  if (errors.length !== 0) {// TODO: handle errors somehow
  }

  return envArgv;
} // Direct JS port of C implementation: https://github.com/nodejs/node/blob/67ba825037b4082d5d16f922fb9ce54516b4a869/src/node_options.cc#L1024-L1063


function ParseNodeOptionsEnvVar(node_options, errors) {
  var env_argv = [];
  var is_in_string = false;
  var will_start_new_arg = true;

  for (var index = 0; index < node_options.length; ++index) {
    var c = node_options[index]; // Backslashes escape the following character

    if (c === '\\' && is_in_string) {
      if (index + 1 === node_options.length) {
        errors.push("invalid value for NODE_OPTIONS " + "(invalid escape)\n");
        return env_argv;
      } else {
        c = node_options[++index];
      }
    } else if (c === ' ' && !is_in_string) {
      will_start_new_arg = true;
      continue;
    } else if (c === '"') {
      is_in_string = !is_in_string;
      continue;
    }

    if (will_start_new_arg) {
      env_argv.push(c);
      will_start_new_arg = false;
    } else {
      env_argv[env_argv.length - 1] += c;
    }
  }

  if (is_in_string) {
    errors.push("invalid value for NODE_OPTIONS " + "(unterminated string)\n");
  }

  return env_argv;
} // Get option values that can be specified via env vars besides NODE_OPTIONS


function getOptionValuesFromOtherEnvVars() {
  var options = {};

  if (process.env.NODE_PENDING_DEPRECATION === '1') {
    options['--pending-deprecation'] = true;
  }

  return options;
}