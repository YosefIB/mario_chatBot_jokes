// copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/package_json_reader.js
'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('./node-primordials'),
    SafeMap = _require.SafeMap;

var _require2 = require('./node-internalBinding-fs'),
    internalModuleReadJSON = _require2.internalModuleReadJSON;

var _require3 = require('url'),
    pathToFileURL = _require3.pathToFileURL;

var _require4 = require('path'),
    toNamespacedPath = _require4.toNamespacedPath; // const { getOptionValue } = require('./node-options');


var cache = new SafeMap();
var manifest;
/**
 * @param {string} jsonPath
 * @return {{string: string, containsKeys: boolean}}
 */

function read(jsonPath) {
  if (cache.has(jsonPath)) {
    return cache.get(jsonPath);
  }

  var _internalModuleReadJS = internalModuleReadJSON(toNamespacedPath(jsonPath)),
      _internalModuleReadJS2 = _slicedToArray(_internalModuleReadJS, 2),
      string = _internalModuleReadJS2[0],
      containsKeys = _internalModuleReadJS2[1];

  var result = {
    string: string,
    containsKeys: containsKeys
  };

  if (string !== undefined) {
    if (manifest === undefined) {
      // manifest = getOptionValue('--experimental-policy') ?
      //   require('internal/process/policy').manifest :
      //   null;
      // disabled for now.  I am not sure if/how we should support this
      manifest = null;
    }

    if (manifest !== null) {
      var jsonURL = pathToFileURL(jsonPath);
      manifest.assertIntegrity(jsonURL, string);
    }
  }

  cache.set(jsonPath, result);
  return result;
}

module.exports = {
  read: read
};